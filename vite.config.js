import { defineConfig } from 'vite'
import jsconfigPaths from 'vite-jsconfig-paths'
import { promises as fsPromises, stat as fsStat, unlinkSync, existsSync, renameSync } from 'fs'
import { join, resolve } from 'path'


const listFiles = async ({ path }) => {
    let allFiles = []

    try {
        const files = await fsPromises.readdir(path)

        for (const file of files) {
            const filePath = join(path, file)
            const fileStats = await fsPromises.stat(filePath)

            if (fileStats.isDirectory()) {
                const subDirFiles = await listFiles({ path: filePath }) // Recursively list files in subdirectories
                allFiles = allFiles.concat(subDirFiles)
            } else {
                allFiles.push(filePath) // Add file path to the array
            }
        }
    } catch (err) {
        console.error('Error reading directory:', err)
    }

    return allFiles
}

const writeFile = async ({ code, filePath }) => {
    try {
        await fsPromises.writeFile(filePath, code)
        console.info(`File '${filePath}' has been created`)
    } catch (err) {
        console.error('Error writing file:', err)
    }
}

const removeFile = ({ filePath }) => {
    try {
        if (existsSync(filePath)) {
            unlinkSync(filePath)
            console.info(`File removed: ${filePath}`)
        } else {
            console.info(`File does not exist: ${filePath}`)
        }
    } catch (err) {
        console.error(err)
    }
}

const componentFilePaths = await listFiles({ path: 'src/components/' })

const actionImportCode = `
    ${
    componentFilePaths?.map((path, index) => {
        if (!path?.includes('.action.')) return ''
        const importPath = path?.replace('src/components', '@components')?.replace('.js', '')
        return `import * as A${index} from '${importPath}'\nconsole.log(A${index})\n`
    })?.join('')
    }
    // import * as X1 from '@scripts/lib/event.lib'
    import * as X2 from '@scripts/lib/html.lib'
    // import * as X3 from '@scripts/lib/pwa.lib'
    import * as X4 from '@scripts/lib/router.lib'
    import * as X5 from '@scripts/lib/util.lib'
    import * as X6 from '@scripts/lib/worker.lib'
    console.log(X1)
    console.log(X2)
    console.log(X3)
    console.log(X4)
    console.log(X5)
    console.log(X6)
`

const actionsFilePath = 'src/_actions_autogenerated.js'

await writeFile({ code: actionImportCode, filePath: 'src/_actions_autogenerated.js' })

const getURLPath = ({ path }) => new URL(`${path}`, import.meta.url).pathname

const paths = {
    ...componentFilePaths?.reduce((acc, componentFilePath) => {
        if (componentFilePath?.endsWith('.js') && !componentFilePath?.includes('.action.')) return acc
        const fileName = componentFilePath?.split('/')?.pop()
        const componentName = fileName?.replace(/\.[^.]+$/, '')
        acc[componentName] = getURLPath({ path: componentFilePath })
        return acc
    }, {}),

    actionsFilePath: getURLPath({ path: actionsFilePath }),

    // 'sw.worker': getURLPath({ path: '/src/sw.worker.js' }),
}


export default defineConfig({
    define: {
        __ENV__: `'${process.env.ENV}'`,
        __BUILD_TIME__: `'${new Date().toISOString()}'`,
        __APP_NAME__: `'take-a-net'`,
    },
    plugins: [
        jsconfigPaths(),
        {
            name: 'postbuild-command',
            closeBundle: async () => {
                const distFilePaths = await listFiles({ path: 'dist/' })
                const cleanedDistFilePaths = distFilePaths?.filter((path) => {
                    return !path?.endsWith('.DS_Store')
                })
                await writeFile({ code: JSON.stringify(cleanedDistFilePaths), filePath: 'dist/dist.json' })
            },
        },
        {
            name: 'move-manifest',
            writeBundle() {
              renameSync(
                resolve(__dirname, 'dist/.vite/manifest.json'),
                resolve(__dirname, 'dist/manifest.json')
              )
            }
          }
    ],
    build: {
        outDir: './dist',
        // sourcemap: true,
        manifest: true,
        emptyOutDir: true,
        minify: ['prod'].includes(process.env.ENV),
        rollupOptions: {
            input: {
                ...paths,
            },
            output: {
                entryFileNames: `[name].js`,
                chunkFileNames: `[name].js`,
                assetFileNames: `[name].component.[ext]`,
            },
        },
    },
})